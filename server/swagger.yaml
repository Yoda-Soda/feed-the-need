openapi: 3.0.3
info:
  title: Nau mai, welcome to Feed the Need
  description: The API is for use with the website [Feed The Need](http://feedtheneed.click) or internal staging at [localhost:3333](http://localhost:3333).
  version: 0.0.1

# For Swagger to always work, remove any defined Servers,
# so that Swagger will always default to the server that it was spun up from.
# This will minimise the scope for errors occuring.

# servers:
#   - url: http://localhost:5123/api
#     description: Internal staging API server for testing
#   - url: http://feedtheneed.click/api
#     description: Main API server

paths:
  /listings:
    post:
      summary: Creates a new listing.
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schema/NewListing"
              type: object
              properties:
                donorId: integer
                title: string
                description: string
              required:
                - donorId
                - title
                - description
      responses:
        "201":
          description: OK - Listing has been listed
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
        "404":
          $ref: "#/components/responses/NotFound"
      tag:
        - listings

    get:
      summary: Returns all listings ordered by newest first
      produces:
        - application/json
      description:
      responses:
        "200":
          description: A JSON array of listings
          content:
            application/json:
              schema:
                $ref: "#/components/schema/ArrayOfListings"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
        "404":
          $ref: "#/components/responses/NotFound"

  /listings/{listingsId}:
    get:
      summary: Gets a listing by ID.
      parameters:
        - in: path
          name: listingsId
          schema:
            type: integer
          required: true
          description: Numeric ID of the listing to get
      responses:
        "200":
          description: your selected listing
          content:
            application/json:
              schema:
                type: object
                required:
                  - donorId
                  - title
                  - description
                properties:
                  id:
                    type: integer
                    primary: true
                    example: 1
                  donorId:
                    type: integer
                  title:
                    type: string
                    example: This is a title
                  description:
                    type: string
                    example: I have a bountiful amount of cabbages, that I am willing to donate.
                  dateCreated:
                    type: date-time
                    example: "2020-10-20T02:05:30.133Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Updates a listing to become claimed.
      parameters:
        - name: listingsId
          schema:
            type: integer
          in: path
          description: id of listing to update.
          required: true
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK - list was updated
        '400':
          description: Bad Request - id is not a positiveInt
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Could not claim item
      tag:
        - listings


components:
  responses:
    BadRequest:
      description: Bad Request - missing parameter/s
    Unauthorized:
      description: Unauthorized
    ServerError:
      description: Server Errors
    NotFound:
      description: Not Found
  schema:
    # DB-table schemas
    Listings:
      type: object
      required:
        - donor_id
        - title
        - description
      properties:
        id:
          type: integer
          primary: true
          example: 1
        donor_id:
          type: integer
        title:
          type: string
          example: This is a title
        description:
          type: string
          example: I have a bountiful amount of cabbages, that I am willing to donate.
        claimant_id:
          type: integer
        date_created:
          type: date-time
          example: "2020-10-20T02:05:30.133Z"
        date_claimed:
          type: date-time
          example: "2020-10-28T02:13:18.212Z"
    User_account:
      properties:
        id:
          type: integer
          primary: true
        email:
          type: string
          example: thecabbageking@hotmail.com
    # Route schemas
    ArrayOfListings:
      type: array
      items:
        type: object
        properties:
          id:
            $ref: "#/components/schema/Listings/properties/id"
          email:
            $ref: "#/components/schema/User_account/properties/email"
          title:
            $ref: "#/components/schema/Listings/properties/title"
          description:
            $ref: "#/components/schema/Listings/properties/description"
          dateCreated:
            $ref: "#/components/schema/Listings/properties/date_created"
    NewListing:
      type: object
      required:
        $ref: "#/components/schema/Listings/required"
      properties:
        donor_id:
          $ref: "#/components/schema/Listings/properties/donor_id"
        title:
          $ref: "#/components/schema/Listings/properties/title"
        description:
          $ref: "#/components/schema/Listings/properties/description"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      in: header
      bearerFormat: JWT

security:
  - bearerAuth: []
